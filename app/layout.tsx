import type { Metadata } from "next";
import { Nunito } from "next/font/google";
import { ClerkProvider, RedirectToSignIn, useUser } from "@clerk/nextjs";
import Sidebar from "./Components/Sidebar/Sidebar";
import GlobalStyleProvider from "./providers/GlobalStyleProvider";
import ContextProvider from "./providers/ContextProvider";
import NextTopLoader from "nextjs-toploader";
import { useEffect, useState } from "react";

// Import Nunito font from Google Fonts
const nunito = Nunito({
  weight: ["400", "500", "600", "700", "800"],
  subsets: ["latin"],
});

// Define metadata for the page
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// Root Layout Component
export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [mounted, setMounted] = useState(false);

  // Ensure the layout only renders client-side
  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) return null; // Prevent SSR rendering mismatch

  return (
    // Wrap everything with ClerkProvider and pass the frontendApi for authentication
    <ClerkProvider frontendApi={process.env.NEXT_PUBLIC_CLERK_FRONTEND_API}>
      <html lang="en">
        <head>
          <link
            rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
            integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA=="
            crossOrigin="anonymous"
            referrerPolicy="no-referrer"
          />
        </head>
        <body className={nunito.className}>
          <NextTopLoader
            height={2}
            color="#27AE60"
            easing="cubic-bezier(0.53,0.21,0,1)"
          />
          <ContextProvider>
            <GlobalStyleProvider>
              {/* Render Sidebar only if the user is authenticated */}
              <AuthenticatedLayout>{children}</AuthenticatedLayout>
            </GlobalStyleProvider>
          </ContextProvider>
        </body>
      </html>
    </ClerkProvider>
  );
}

// A new component to handle the authenticated layout
function AuthenticatedLayout({ children }: { children: React.ReactNode }) {
  const { isLoaded, user } = useUser();

  // If the user is loading, don't render anything
  if (!isLoaded) {
    return null;
  }

  // If the user is not authenticated, redirect them to the sign-in page
  if (!user) {
    return <RedirectToSignIn />;
  }

  return (
    <div className="flex">
      <Sidebar />
      <div className="w-full">{children}</div>
    </div>
  );
}
